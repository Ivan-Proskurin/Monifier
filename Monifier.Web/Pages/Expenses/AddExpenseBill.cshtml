@page "{flowId:int}/{billId:int?}"
@using System.Linq
@using Common.Extensions
@model Expenses.AddExpenseBillModel

@{
    ViewBag.Title = "Расходы";
    var accounts = @Model.Accounts.Select(x => x.Name);
    var flows = @Model.Flows.Select(x => x.Name);
    var billItems = @Model.Bill.GetItems();
}

<div class="container form-caption-sm bottom-dashed-line">
    <div class="row">
        <div class="col">
            @if (Model.Bill.IsNew)
            {
                <h4>Ввод чека</h4>
            }
            else
            {
                <h4>Чек #@Model.Bill.Id</h4>
            }
        </div>
    </div>
</div>


<form method="post">
    <input asp-for="Good.FlowId" hidden />
    <input asp-for="Good.ReturnUrl" hidden />
    <input asp-for="Good.ReturnPage" hidden />
    <input asp-for="Good.IsCorrection" hidden />
    <input type="text" id="Good_Bill" name="Good.Bill" value="@Model.Good.Bill" class="form-control"
           style="display: none;" />

    <div asp-validation-summary="ModelOnly" class="text-danger add-bill-validation-summary"></div>
    <div id="error" class="text-danger add-bill-validation-summary hidden"></div>

    <div class="container">
        <div class="row" style="margin-bottom: 15px;">
            <div class="col-md-3">
                <h5 style="margin-top: 4px;">Счет:</h5>
            </div>
            <div class="col-md-9">
                <autocomplete asp-for="Good.Account" value="@Model.Good.Account" value-list="@accounts" />
                <span asp-validation-for="Good.Account"></span>
            </div>
        </div>
        <div class="row" style="margin-bottom: 35px;">
            <div class="col-md-3">
                <h5 style="margin-top: 4px;">Статья расходов:</h5>
            </div>
            <div class="col-md-9">
                <autocomplete asp-for="Good.FlowName" value="@Model.Good.FlowName" value-list="@flows" />
                <span asp-validation-for="Good.FlowName"></span>
            </div>
        </div>
        @if (Model.Good.IsCorrection)
        {
            <div class="row" style="margin-bottom: 20px;">
                <div class="col-md-3"></div>
                <div class="col-md-9">
                        <div class="form-group">
                            <span aria-disabled="true" data-toggle="tooltip" data-placement="top"
                                  title="Изменения будут касаться только доступного баланса счета">
                                <input type="checkbox" checked disabled id="correctionCheckbox" />
                                <label class="form-check-label" for="correctionCheckbox">Корректирующий доход</label>
                            </span>
                        </div>
                </div>
            </div>
        }
        <div class="row">
            <div class="col-md-6 col-sm-6">
                <div class="container">
                    <div class="row">
                        <div class="column-header-col col col-md-8 col-sm-4 col-8">
                            <h5 class="form-caption">Позиция:</h5>
                        </div>
                        <div class="col col-md-4 col-sm-8 col-4">
                            <button type="submit" asp-page-handler="add" style="margin-left: 12px;"
                                    class="btn btn-primary btn-sm cursor-pointer">
                                Добавить в чек
                            </button>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <label asp-for="Good.Category" class="col-form-label col-md-3"></label>
                    <div class="col-md-9">
                        <autocomplete asp-for="Good.Category" class="form-control"
                                      value="@Model.Good.Category" autocomplete="off"
                                      value-list="@Model.Categories.Select(x => x.Name)" />
                        <input type="text" name="Good.CategoryToAdd" value="@Model.Good.CategoryToAdd"
                               style="display: none;" />
                        <span asp-validation-for="Good.Category"></span>
                    </div>
                </div>
                <div class="form-group row">
                    <label asp-for="Good.Product" class="col-form-label col-md-3"></label>
                    <div class="col-md-9">
                        <autocomplete asp-for="Good.Product" class="form-control"
                                      value-list="@Model.Products.Select(x => x.Name)"
                                      value="@Model.Good.Product" autocomplete="off" />
                        <input type="text" name="Good.ProductToAdd" value="@Model.Good.ProductToAdd"
                               style="display: none;" />
                        <span asp-validation-for="Good.Product"></span>
                    </div>
                </div>
                <div class="form-group row">
                    <label asp-for="Good.Price" class="col-form-label col-md-3"></label>
                    <div class="col-md-4">
                        <input asp-for="Good.Price" class="form-control money-input" autocomplete="off"
                               value="@Model.Good.Price" />
                        <span asp-validation-for="Good.Price"></span>
                    </div>
                    <label asp-for="Good.Quantity" class="col-form-label col-md-3"></label>
                    <div class="col-md-2">
                        <input asp-for="Good.Quantity" class="form-control money-input" autocomplete="off"
                               value="@Model.Good.Quantity" />
                    </div>
                </div>
                <div class="form-group row">
                    <label asp-for="Good.Comment" class="col-form-label col-md-3"></label>
                    <div class="col-md-9">
                        <input asp-for="Good.Comment" class="form-control" autocomplete="off"
                               value="@Model.Good.Comment" />
                    </div>
                </div>
            </div>
            <div class="col-md-6 col-sm-6">
                <div class="container">
                    <div class="row">
                        <div class="column-header-col col-md-9 col-sm-7 col-9">
                            <h5 class="form-caption">Итог:</h5>
                        </div>
                        <div class="col col-md-3 col-sm-5 col-3">
                            <button id="confirmButton" type="button" class="btn btn-danger btn-sm cursor-pointer">
                                Подтвердить
                            </button>
                        </div>
                    </div>
                </div>
                <div class="container">
                    <div class="row expenses-totals">
                        <div class="column-header-col col col-sm-4">
                            <span>Сумма по чеку:</span>
                        </div>
                        <div class="subtotals-placeholder col col-sm-5">
                            <span>@Model.Bill.DateTime.ToStandardString()</span>
                        </div>
                        <div class="expenses-sum col col-sm-3">
                            <span>@Model.Bill.Cost</span>
                        </div>
                    </div>
                    @for (var i = 0; i < billItems.Count; i++)
                    {
                        var item = billItems[i];

                        <div class="row expenses-subtotals-row">
                            <div class="expenses-subtotals col col-sm-4">
                                <span>#@(i + 1)</span>
                            </div>
                            <div class="expenses-subtotals col col-sm-5">
                                <span>@item.DisplayName</span>
                            </div>
                            <div class="expenses-subtotals expenses-sum col col-sm-3">
                                <span>@item.Cost</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="row" style="margin-top: 15px;">
            <div class="col">
                <button type="submit" asp-page-handler="removeLast" class="btn btn-outline-danger btn-sm cursor-pointer">
                    Отменить последнее
                </button>
            </div>
            <div class="col" style="text-align: right;">
                <a asp-page="@Model.Good.ReturnPage" class="btn btn-outline-danger btn-sm cursor-pointer">
                    Отменить и завершить ввод
                </a>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    <script>
        var flowId = "@Model.Good.FlowId";
        var billId = "@Model.Bill.Id";
        var urlPrefix = "/Expenses/AddExpenseBill/" + flowId;
        if (billId !== "0") urlPrefix += "/" + billId;
        
        activateLink("#expensesLink");
        makeInputAutocomplete("Good.Account");
        makeInputAutocomplete("Good.FlowName", null, updateCategoriesList);
        var categoryAutocomplete = makeInputAutocomplete("Good.Category", null, updateProductsList);
        var productsAutocomplete = makeInputAutocomplete("Good.Product", null, selectCategoryByProduct);
        makeInputNumeric("Good.Price", false);
        makeInputNumeric("Good.Quantity", false);
        $('[data-toggle="tooltip"]').tooltip();

        $("#confirmButton").click(function() {
            var url = urlPrefix + "?handler=confirm";
            var args = {
                account: $("#Good_Account").val(),
                bill: $("#Good_Bill").val()
            };
            sendAjax(url,
                JSON.stringify(args),
                function(response) {
                    if (!response.success) {
                        var error = $("#error");
                        error.html(response.error);
                        error.removeClass("hidden");
                        return;
                    }
                    window.location.replace("@Model.Good.ReturnUrl");
                });
        });

        function updateCategoriesList() {
            var url = urlPrefix + "?handler=getflowcategories";
            var categoryVal = $("#Good_Category").val();
            sendAjax(url,
                $("#Good_FlowName").val(),
                function(response) {
                    flowId = "" + response.flowId;
                    categoryAutocomplete.destroy();
                    categoryAutocomplete = makeInputAutocomplete("Good.Category", response.categories, updateProductsList);
                    if (response.categories.indexOf(categoryVal) >= 0) {
                        $("#Good_Category").val(categoryVal);
                    } else {
                        if (response.categories.length === 1) {
                            $("#Good_Category").val(response.categories[0]);
                            updateProductsList();
                        } else {
                            $("#Good_Category").val("");
                            productsAutocomplete.destroy();
                            productsAutocomplete = makeInputAutocomplete("Good.Product", null, selectCategoryByProduct);
                            $("#Good_Category").val("");
                        }
                    }
                });
        }

        function updateProductsList() {
            var url = urlPrefix + "?handler=getcategoryproducts";
            var productVal = $("#Good_Product").val();
            sendAjax(url,
                $("#Good_Category").val(),
                function(response) {
                    productsAutocomplete.destroy();
                    productsAutocomplete = makeInputAutocomplete("Good.Product", response, selectCategoryByProduct);
                    if (response.indexOf(productVal) >= 0) {
                        $("#Good_Product").val(productVal);
                    } else
                        $("#Good_Product").val("");
                });
        }

        function selectCategoryByProduct() {
            var url = urlPrefix + "?handler=getcategorybyproduct";
            var args = {
                flowId: +flowId,
                product: $("#Good_Product").val()
            };

            sendAjax(url,
                JSON.stringify(args),
                function(response) {
                    $("#Good_Category").val(response);
                });
        }

        $("#Good_Category").keyup(function() {
            if (!($("#Good_Category")).val()) {
                var url = urlPrefix + "?handler=getflowproducts";
                sendAjax(url,
                    flowId,
                    function(response) {
                        productsAutocomplete.destroy();
                        productsAutocomplete = makeInputAutocomplete("Good.Product", response, selectCategoryByProduct);
                    });
            }
        });

        if (!$("#Good_FlowName").val())
            $("#Good_FlowName").focus();
        else {
            if ($("#Good_Category").val())
                $("#Good_Product").focus();
            else
                $("#Good_Category").focus();
        }

    </script>

}